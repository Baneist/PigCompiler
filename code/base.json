[
    {
        "production": {"left": "<开始>", "right": ["<PCC程序>", "<声明串>"]},
        "action": [
            
        ]
    },
    {
        "production": {"left": "<PCC程序>", "right": []},
        "action": [
            "#emit('j','main','',0)"
        ]
    },
    {
        "production": {"left": "<声明串>", "right": ["<声明>"]},
        "action": [
            
        ]
    },
    {
        "production": {"left": "<声明串>", "right": ["<声明>", "<声明串>"]},
        "action": [
            
        ]
    },
    {
        "production": {"left": "<声明>", "right": ["<声明-int类型>", "<ID>", "<声明类型>"]},
        "action": [
            
        ]
    },
    {
        "production": {"left": "<声明>", "right": ["<声明-void类型>", "<ID>", "<函数声明>"]},
        "action": [
            
        ]
    },
    {
        "production": {"left": "<声明-int类型>", "right": ["$int"]},
        "action": [
            "ldict.t_type = @r0.cont"
        ]
    },
    {
        "production": {"left": "<声明-void类型>", "right": ["$void"]},
        "action": [
            "ldict.t_type = @r0.cont"
        ]
        
    },
    {
        "production": {"left": "<ID>", "right": ["$identifier"]},
        "action": [
            "ldict.newid = @r0.cont; @l.debug_pos = @r0.debug_pos; @l.cont=@r0.cont; ldict.debug_id_node = @r0"
        ]
    },
    {
        "production": {"left": "<声明类型>", "right": ["<变量声明>"]},
        "action": [
            "checkVarNotDefined(ldict.newid,'$global', ldict.debug_id_node)",
            "ldict.var->append((ldict.newid, 4, '$global', ldict.t_type, None, len(mid_code)))"
            
        ]
    },
    {
        "production": {"left": "<声明类型>", "right": ["<数组声明>"]},
        "action": [
            "checkVarNotDefined(ldict.newid,'$global', ldict.debug_id_node)",
            "ldict.var->append((ldict.newid, @r0.size , '$global', 'arr', @r0.list, len(mid_code)))"
        ]
    },
    {
        "production": {"left": "<声明类型>", "right": ["<函数声明>"]},
        "action": [
            
        ]
    },
    {
        "production": {"left": "<变量声明>", "right": ["$;"]},
        "action": [
            "@l.type = 'v'; @l.cont = ldict.newid; @l.debug_pos = @r0.debug_pos"
        ]
    },
    {
        "production": {"left": "<数组声明>", "right": ["<数组维度>","$;"]},
        "action": [
            "@l.list = @r0.list; @l.size=4",
            "for i in @l.list: @l.size = @l.size * int(i)"
        ]
    },
    {
        "production": {"left": "<数组维度>", "right": ["<数组一维>"]},
        "action": [
            "@l.list=[@r0.val]; @l.num=1;"
        ]
    },
    {
        "production": {"left": "<数组维度>", "right": ["<数组维度>", "<数组一维>"]},
        "action": [
            "@l.list=@r0.list + [@r1.val]; @l.num=@r0.num+1;"
        ]
    },
    {
        "production": {"left": "<数组一维>", "right": ["$[","$digit_int","$]"]},
        "action": [
            "@l.val=@r1.cont"
        ]
    },
    {
        "production": {"left": "<函数声明>", "right": ["<函数头>","$(","<函数形参定义列表>","$)","<语句块>"]},
        "action": [
            "#removeVar(@r0.cont)"
        ]
    },
    {
        "production": {"left": "<函数头>", "right": []},
        "action": [
            "checkFuncNotDefined(ldict.newid, @r0)",
            "ldict.func[ldict.newid]=0; ldict.return=0; ldict.functype[ldict.newid]=ldict.t_type",
            "@l.cont=ldict.newid",
            "@l.debug_pos=@r0.debug_pos",
            "ldict.nowfunc = ldict.newid",
            "@l.quad=nextquad",
            "emit(':',ldict.newid,'','')"
        ]
    },
    {
        "production": {"left": "<标识定义>", "right": ["$identifier", "$;"]},
        "action": [
            
        ]
    },
    {
        "production": {"left": "<函数名>", "right": ["$identifier"]},
        "action": [
            "checkFuncNotDefined(@r0.cont, @r0)",
            "ldict.func[@r0.cont]=0; ldict.return=0; ldict.functype[@r0.cont]=ldict.t_type",
            "@l.cont=@r0.cont",
            "@l.debug_pos=@r0.debug_pos",
            "ldict.nowfunc = @r0.cont",
            "@l.quad=nextquad",
            "emit(':',@r0.cont,'','')"
        ]
    },
    {
        "production": {"left": "<函数形参定义列表>", "right": ["<函数形参定义>"]},
        "action": [
            "ldict.functypestack[ldict.nowfunc]=@r0.tlist"
        ]
    },
    {
        "production": {"left": "<函数形参定义>", "right": ["$void"]},
        "action": [
            "ldict.func[ldict.nowfunc]=0; @l.tlist=[]"
        ]
    },
    {
        "production": {"left": "<函数形参定义>", "right": ["<形参>", "<追加形参定义>"]},
        "action": [
            "ldict.func[ldict.nowfunc]=@r1.cnt+1; @l.tlist=[@r0.type] + @r1.tlist"
        ]
    },
    {
        "production": {"left": "<追加形参定义>", "right": ["$,","<形参>", "<追加形参定义>"]},
        "action": [
            "@l.cnt=@r2.cnt+1; @l.tlist=[@r1.type] + @r2.tlist"
        ]
    },
    {
        "production": {"left": "<追加形参定义>", "right": []},
        "action": [
            "@l.cnt=0; @l.tlist=[]"
        ]
    },
    {
        "production": {"left": "<形参>", "right": ["<类型>", "$identifier"]},
        "action": [
            "checkVarNotDefined(@r1.cont, ldict.nowfunc, @r1)",
            "ldict.var->append((@r1.cont, 4, ldict.nowfunc, @r0.type, None, len(mid_code)))",
            "@l.type=@r0.type"
        ]
    },
    {
        "production":{"left": "<类型>", "right": ["$int"]},
        "action": [
            "@l.type=@r0.cont"
        ]
    },
    {
        "production":{"left": "<语句块>", "right": ["${","<语句串>","$}"]},
        "action": [
            ""
        ]
    },
    {
        "production":{"left": "<内部变量声明>", "right": ["<类型>", "$identifier", "$;"]},
        "action": [
            "checkVarNotDefined(@r1.cont, ldict.nowfunc, @r1)",
            "ldict.var->append((@r1.cont, 4, ldict.nowfunc, @r0.type, None, len(mid_code)))"
            
        ]
    },
    {
    "production":{"left": "<内部变量声明>", "right": ["<类型>", "$identifier","<数组维度>","$;"]},
    "action": [
        "checkVarNotDefined(@r1.cont, ldict.nowfunc, @r1)",
        "ldict.var->append((@r1.cont, 4, ldict.nowfunc, 'arr', @r2.list, len(mid_code)))"
    ]
},
    {
        "production":{"left": "<语句串>", "right": []},
        "action": [
            
        ]
    },
    {
        "production":{"left": "<语句串>", "right": ["<语句>", "<语句串>"]},
        "action": [
            
        ]
    },
    {
        "production":{"left": "<语句>", "right": ["<if语句>"]},
        "action": [
            
        ]
    },
    {
        "production":{"left": "<语句>", "right": ["<while语句>"]},
        "action": [
            
        ]
    },
    {
        "production":{"left": "<语句>", "right": ["<return语句>"]},
        "action": [
            
        ]
    },
    {
        "production":{"left": "<语句>", "right": ["<赋值语句>"]},
        "action": [
            
        ]
    },
    {
        "production":{"left": "<语句>", "right": ["<内部变量声明>"]},
        "action": [
            
        ]
    },
    {
        "production":{"left": "<return语句>", "right": ["$return","<return内容>","$;"]},
        "action": [
            "emit('ret','','','')",
            "ldict.return += 1"
        ]
    },
    {
        "production":{"left": "<return内容>", "right": []},
        "action": [
            
        ]
    },{
        "production":{"left": "<return内容>", "right": ["<表达式>"]},
        "action": [
            "emit('=', @r0.val, '', '#eax')",
            "UpdateVarUse(@r0.val, ldict.nowfunc)"
        ]
    },
    {
        "production":{"left": "<左括号>", "right": [ "$("]},
        "action": [
            "@l.quad=nextquad"
        ]
    },
    {
        "production":{"left": "<右括号>", "right": [ "$)"]},
        "action": [
            "@l.quad=nextquad"
        ]
    },
    {
        "production":{"left": "<真值判断>", "right": [ "<左括号>", "<布尔表达式>", "<右括号>"]},
        "action": [
            "@l.frontquad=@r0.quad",
            "@l.backquad=@r2.quad",
            "@l.t=@r1.t; @l.f=@r1.f;"
        ]
    },
    {
        "production":{"left": "<while语句>", "right": ["$while", "<真值判断>", "<语句块>"]},
        "action": [
            "batchlist(@r1.t, @r1.backquad)",
            "emit('j', '', '', @r1.frontquad)",
            "batchlist(@r1.f, nextquad)"
        ]
    },
    {
        "production":{"left": "<if语句>", "right": ["$if", "<真值判断>", "<语句块>", "<else内容>"]},
        "action": [
            "batchlist(@r1.t, @r1.backquad)",
            "if not @r3.end: batchlist(@r1.f, @r3.quad)",
            "if @r3.end: batchlist(@r1.f, nextquad)",
            "if @r3.qr != 0: backFill(@r3.qr, (None,None,None,nextquad))"
        ]
    },
    {
        "production":{"left": "<else内容>", "right": []},
        "action": [
            "@l.end=True; @l.qr = 0"
        ]
    },
    {
        "production":{"left": "<else>", "right": ["$else"]},
        "action": [
            "emit('j','','',0); @l.qr=nextquad-1",
            "@l.quad=nextquad"
        ]
    },
    {
        "production":{"left": "<else内容>", "right": ["<else>", "<语句块>"]},
        "action": [
            "@l.end=False; @l.qr = @r0.qr",
            "@l.quad=@r0.quad"
        ]
    },
    {
        "production":{"left": "<赋值语句>", "right": ["$identifier", "$=", "<表达式>", "$;"]},
        "action": [
            "checkVarDefined(@r0.cont,ldict.nowfunc, @r0)",
            "WarningVarType(getVarType(@r0.cont), @r2.type, @r0)",
            "emit('=', @r2.val, '', @r0.cont)",
            "UpdateVarUse(@r0.cont, ldict.nowfunc); UpdateVarUse(@r2.val, ldict.nowfunc)"
            
        ]
    },
    {
        "production":{"left": "<赋值语句>", "right": ["<数组>", "$=", "<表达式>", "$;"]},
        "action": [
            "checkVarDefined(@r0.vname, ldict.nowfunc, @r0)",
            "checkArrLength(@r0.vname,@r0.len, ldict.nowfunc, @r0)",
            "emit('=r', @r2.val, @r0.offset, @r0.vname)",
            "UpdateVarUse(@r2.val, ldict.nowfunc); UpdateVarUse(@r0.vname, ldict.nowfunc); UpdateVarUse(@r0.offset, ldict.nowfunc)"
        ]
    },
    {
        "production":{"left": "<表达式>", "right": ["<加法表达式>"]},
        "action": [
            "@l.type=@r0.type;@l.val=@r0.val"
        ]
    },
    {
        "production":{"left": "<布尔表达式>", "right": ["<布尔or表达式>"]},
        "action": [
            "@l.f=@r0.f; @l.t=@r0.t;"
        ]
    },
    {
        "production":{"left": "<布尔or表达式>", "right": ["<布尔and表达式>", "<布尔or追加>"]},
        "action": [
            "if @r1.end: @l.t=@r0.t; @l.f=@r0.f;",
            "if not @r1.end: @l.f=@r1.f; @l.t=mergelist(@r0.t, @r1.t);",
            "if not @r1.end: batchlist(@r0.f, @r1.quad)"
        ]
    },
    {
        "production":{"left": "<布尔or追加>", "right": ["<or符号>", "<布尔and表达式>", "<布尔or追加>"]},
        "action": [
            "@l.end=False",
            "if @r2.end: @l.t=@r1.t; @l.f=@r1.f;",
            "if not @r2.end: @l.f=@r2.f; @l.t=mergelist(@r1.t, @r2.t);",
            "@l.quad=@r0.quad",
            "if not @r2.end: batchlist(@r1.f, @r2.quad)"
        ]
    },
    {
        "production":{"left": "<布尔or追加>", "right": []},
        "action": [
            "@l.end=True"
        ]
    },
    {
        "production":{"left": "<or符号>", "right": ["$or"]},
        "action": [
            "@l.quad=nextquad"
        ]
    },
    {
        "production":{"left": "<or符号>", "right": ["$||"]},
        "action": [
            "@l.quad=nextquad"
        ]
    },
    {
        "production":{"left": "<布尔and表达式>", "right": ["<布尔not表达式>"]},
        "action": [
            "@l.t=@r0.t; @l.f=@r0.f;"
        ]
    },
    {
        "production":{"left": "<布尔and表达式>", "right": ["<布尔and表达式>", "<and符号>","<M>", "<布尔not表达式>"]},
        "action": [
            "@l.t=@r3.t; @l.f=mergelist(@r0.f, @r3.f);",
            "batchlist(@r0.t, @r2.quad)"
        ]
    },
    {
        "production":{"left": "<and符号>", "right": ["$and"]},
        "action": [
            
        ]
    },
    {
        "production":{"left": "<and符号>", "right": ["$&&"]},
        "action": [
            
        ]
    },
    {
        "production":{"left": "<布尔not表达式>", "right": ["<布尔因子>"]},
        "action": [
            "@l.t=@r0.t",
            "@l.f=@r0.f"
        ]
    },
    {
        "production":{"left": "<布尔not表达式>", "right": ["<not符号>","<布尔因子>"]},
        "action": [
            "@l.t=@r1.f",
            "@l.f=@r1.t"
        ]
    },
    {
        "production":{"left": "<not符号>", "right": ["$not"]},
        "action": [

        ]
    },
    {
        "production":{"left": "<not符号>", "right": ["$~"]},
        "action": [

        ]
    },
    {
        "production":{"left": "<not符号>", "right": ["$!"]},
        "action": [

        ]
    },
    {
        "production":{"left": "<布尔因子>", "right": ["$(", "<布尔表达式>", "$)"]},
        "action": [
            "@l.t=@r1.t",
            "@l.f=@r1.f"
        ]
    },
    {
        "production":{"left": "<布尔因子>", "right": ["<比较表达式>"]},
        "action": [
            "@l.t=@r0.t",
            "@l.f=@r0.f"
        ]
    },
    {
        "production":{"left": "<比较表达式>", "right": ["<表达式>", "<比较>"]},
        "action": [
            "if not @r1.has: @l.t=makelist(nextquad);@l.f=makelist(nextquad+1);emit('jnz', @r0.val,'', 0);emit('j', '', '', 0);",
            "if @r1.has: backFill(@r1.quad, (None,@r0.val,None,None));@l.t=@r1.t;@l.f=@r1.f;",
            "UpdateVarUse(@r0.val, ldict.nowfunc);"
        ]
    },
    {
        "production":{"left": "<比较>", "right": []},
        "action": [
            "@l.has=False"
        ]
    },
    {
        "production":{"left": "<比较>", "right": ["<比较符号>", "<表达式>"]},
        "action": [
            "@l.has=True",
            "@l.quad=nextquad",
            "@l.t=makelist(nextquad);@l.f=makelist(nextquad+1);",
            "emit('j'+@r0.cont,'', @r1.val, 0);emit('j', '', '', 0);",
            "UpdateVarUse(@r1.val, ldict.nowfunc);"
        ]
    },
    {
        "production":{"left": "<比较符号>", "right": ["$<"]},
        "action": [
            "@l.cont=@r0.cont"
        ]
    },
    {
        "production":{"left": "<比较符号>", "right": ["$<="]},
        "action": [
            "@l.cont=@r0.cont"
        ]
    },
    {
        "production":{"left": "<比较符号>", "right": ["$>"]},
        "action": [
            "@l.cont=@r0.cont"
        ]
    },
    {
        "production":{"left": "<比较符号>", "right": ["$>="]},
        "action": [
            "@l.cont=@r0.cont"
        ]
    },{
        "production":{"left": "<比较符号>", "right": ["$=="]},
        "action": [
            "@l.cont=@r0.cont"
        ]
    },
    {
        "production":{"left": "<比较符号>", "right": ["$!="]},
        "action": [
            "@l.cont=@r0.cont"
        ]
    },
    {
        "production":{"left": "<M>", "right": []},
        "action": [
            "@l.quad=nextquad"
        ]
    },
    {
        "production":{"left": "<加法表达式>", "right": ["<项>"]},
        "action": [
            "@l.type=@r0.type; @l.val=@r0.val"
        ]
    },
    {
        "production":{"left": "<加法表达式>", "right": ["<加法表达式>","<加法符号>","<项>"]},
        "action": [
            "if @r0.type == 'void' or @r2.type == 'void': WarningVoid(ldict.last_void);",
            "@l.type = 'int'; @l.val=newVar(@l.type)",
            "emit(@r1.cont, @r0.val, @r2.val, @l.val)",
            "UpdateVarUse(@r0.val, ldict.nowfunc); UpdateVarUse(@r2.val, ldict.nowfunc)"
        ]
    },
    {
        "production":{"left": "<加法符号>", "right": ["$+"]},
        "action": [
            "@l.cont=@r0.cont"
        ]
    },
    {
        "production":{"left": "<加法符号>", "right": ["$-"]},
        "action": [
            "@l.cont=@r0.cont"
        ]
    },
    {
        "production":{"left": "<项>", "right": ["<因子>"]},
        "action": [
            "@l.val=@r0.val; @l.type = @r0.type"
        ]
    },
    {
        "production":{"left": "<项>", "right": ["<项>", "<项符号>", "<因子>"]},
        "action": [
            "if @r0.type == 'void' or @r2.type == 'void': WarningVoid(ldict.last_void);",
            "@l.type = maxType(@r0.type, @r2.type); @l.val=newVar(@l.type)",
            "emit(@r1.cont, @r0.val, @r2.val, @l.val)",
            "UpdateVarUse(@r0.cont, ldict.nowfunc); UpdateVarUse(@r2.val, ldict.nowfunc)"
        ]
    },
    {
        "production":{"left": "<项符号>", "right": ["$*"]},
        "action": [
            "@l.cont=@r0.cont"
        ]
    },
    {
        "production":{"left": "<项符号>", "right": ["$/"]},
        "action": [
            "@l.cont=@r0.cont"
        ]
    },
    {
        "production":{"left": "<因子>", "right": ["$digit_int"]},
        "action": [
            "@l.val=newVar('int'); @l.type='int'; emit('=i', @r0.cont , '' , @l.val)"
        ]
    },
    {
        "production":{"left": "<因子>", "right": ["<数组>"]},
        "action": [
            "checkArrLength(@r0.vname,@r0.len, ldict.nowfunc, @r0)",
            "@l.val=newVar('int'); @l.type='int'; emit('=l', @r0.vname, @r0.offset , @l.val)",
            "UpdateVarUse(@r0.vname, ldict.nowfunc); UpdateVarUse(@r0.offset, ldict.nowfunc)"
        ]
    },
    {
        "production":{"left": "<因子>", "right": ["$identifier", "<FTYPE>"]},
        "action": [
            "if @r1.mode=='v': checkVarDefined(@r0.cont,ldict.nowfunc, @r0)",
            "if @r1.mode=='v': @l.val=@r0.cont; @l.type=getVarType(@r0.cont)",
            "if @r1.mode=='f': checkFuncDefined(@r0.cont, @r0); checkFuncParNum(@r0.cont,@r1.cnt, @r0);",
            "if @r1.mode=='f': emit('call', @r0.cont, '', ''); @l.val=newVar('int');emit('=','#eax','',@l.val); @l.type=ldict.functype[@r0.cont]",
            "if @r1.mode=='f': \n for i in @r1.qlist: \n  backFill(i, (None, None, None, @r0.cont))",
            "if @l.type == 'void': ldict.last_void = @r0"
        ]
    },
    {
        "production":{"left": "<因子>", "right": ["$(","<表达式>","$)"]},
        "action": [
            "@l.val=@r1.val; @l.type=@r1.type"
        ]
    },
    {
        "production":{"left": "<FTYPE>", "right": []},
        "action": [
            "@l.mode='v'"
        ]
    },
    {
        "production":{"left": "<FTYPE>", "right": ["<函数过程>"]},
        "action": [
            "@l.mode='f'; @l.qlist=[]",
            "for j, i in enumerate(@r0.varlist):\n @l.qlist->append(nextquad);emit('par',i,j,''); UpdateVarUse(i, ldict.nowfunc);",
            "@l.cnt=len(@r0.varlist)"
        ]
    },
    {
        "production":{"left": "<函数过程>", "right": ["$(","<参数列表>","$)"]},
        "action": [
            "@l.varlist=@r1.varlist"
        ]
    },
    {
        "production":{"left": "<参数列表>", "right": []},
        "action": [
            "@l.cnt=0",
            "@l.varlist=[]"
        ]
    },
    {
        "production":{"left": "<参数列表>", "right": ["<追加参数列表>"]},
        "action": [
            "@l.cnt=@r0.cnt",
            "@l.varlist=@r0.varlist"
        ]
    },
    {
        "production":{"left": "<追加参数列表>", "right": ["<表达式>"]},
        "action": [
            "@l.cnt=1",
            "@l.varlist=makelist(@r0.val)"
        ]
    },
    {
        "production":{"left": "<追加参数列表>", "right": ["<追加参数列表>", "$,", "<表达式>"]},
        "action": [
            "@l.cnt=@r0.cnt+1",
            "@l.varlist=mergelist(@r0.varlist, makelist(@r2.val))"
        ]
    },
    {
        "production": {"left": "<数组>", "right": ["<ID>","$[","<表达式>","$]"]},
        "action": [
            "@l.len=1; @l.vname=@r0.cont; @l.cont=@r0.cont",
            "@l.offset = newVar(ldict.nowfunc); emit('*', @r2.val, 4, @l.offset); UpdateVarUse(@r2.val, ldict.nowfunc);",
            "@l.debug_pos = @r0.debug_pos"
        ]
    },
    {
        "production": {"left": "<数组>", "right": ["<数组>","$[","<表达式>","$]"]},
        "action": [
            "@l.len = @r0.len + 1; @l.vname = @r0.vname; @l.cont=@r0.cont",
            "ntmp=newVar('int'); emit('*', @r0.offset, int(getVar(@l.vname, ldict.nowfunc)[4][@r0.len-1]), ntmp)",
            "atmp = newVar(ldict.nowfunc); emit('*', @r2.val, 4, atmp); UpdateVarUse(@r2.val, ldict.nowfunc);",
            "@l.offset=newVar('int'); emit('+', ntmp, atmp, @l.offset); UpdateVarUse(ntmp, ldict.nowfunc); UpdateVarUse(atmp, ldict.nowfunc);",
            "@l.debug_pos = @r0.debug_pos",
            "UpdateVarUse(@r0.offset, ldict.nowfunc); UpdateVarUse(@l.vname, ldict.nowfunc); UpdateVarUse(@r2.val, ldict.nowfunc); UpdateVarUse(ntmp, ldict.nowfunc)"
        ]
    }
]