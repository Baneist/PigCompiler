[
    {
        "production": {"left": "<开始>", "right": ["<程序>"]},
        "action": [
            
        ]
    },
    {
        "production": {"left": "<程序>", "right": []},
        "action": [
            "#emit('j','main','',0)"
        ]
    },
    {
        "production": {"left": "<程序>", "right": ["<程序块>", "<程序>"]},
        "action": [
            
        ]
    },
    {
        "production": {"left": "<程序块>", "right": ["<变量与函数声明>"]},
        "action": [
            
        ]
    },
    {
        "production": {"left": "<变量与函数声明>", "right": ["<类型>", "<标识定义>"]},
        "action": [
            "if @r1.type == 'v': ldict.var->append((@r1.cont, 4, '$global'))"
        ]
    },
    {
        "production": {"left": "<标识定义>", "right": ["$identifier", "$;"]},
        "action": [
            "@l.type = 'v'; @l.cont = @r0.cont"
        ]
    },
    {
        "production": {"left": "<函数名>", "right": ["$identifier"]},
        "action": [
            "checkFuncNotDefined(@r0.cont, @r0)",
            "ldict.func[@r0.cont]=0",
            "@l.cont=@r0.cont",
            "@l.debug_pos=@r0.debug_pos",
            "ldict.nowfunc = @r0.cont",
            "@l.quad=nextquad",
            "emit(@r0.cont+':','','','')"
        ]
    },
    {
        "production": {"left": "<标识定义>", "right": ["<函数名>","$(","<函数形参定义>","$)", "<语句块>"]},
        "action": [
            "@l.type='f'",
            "checkHasReturn(@r0.cont, @r0);"
        ]
    },
    {
        "production": {"left": "<函数形参定义>", "right": []},
        "action": [
            "ldict.func[ldict.nowfunc]=0"
        ]
    },
    {
        "production": {"left": "<函数形参定义>", "right": ["<形参>", "<追加形参定义>"]},
        "action": [
            "ldict.func[ldict.nowfunc]=@r1.cnt+1"
        ]
    },
    {
        "production": {"left": "<追加形参定义>", "right": ["$,","<形参>", "<追加形参定义>"]},
        "action": [
            "@l.cnt=@r2.cnt+1"
        ]
    },
    {
        "production": {"left": "<追加形参定义>", "right": []},
        "action": [
            "@l.cnt=0"
        ]
    },
    {
        "production": {"left": "<形参>", "right": ["$int", "$identifier"]},
        "action": [
            "ldict.var->append((@r1.cont, 4, ldict.nowfunc))"
        ]
    },
    {
        "production":{"left": "<类型>", "right": ["$int"]},
        "action": [
            "@l.type=@r0.cont"
        ]
    },
    {
        "production":{"left": "<类型>", "right": ["$void"]},
        "action": [
            "@l.type=@r0.cont"
        ]
    },
    {
        "production":{"left": "<语句块>", "right": ["${","<内部声明>","<语句串>","$}"]},
        "action": [
            ""
        ]
    },
    {
        "production":{"left": "<内部声明>", "right": []},
        "action": [
            
        ]
    },
    {
        "production":{"left": "<内部声明>", "right": ["<内部变量声明>", "$;", "<内部声明>"]},
        "action": [
            
        ]
    },
    {
        "production":{"left": "<内部变量声明>", "right": ["$int", "$identifier"]},
        "action": [
            "ldict.var->append((@r1.cont, 4, ldict.nowfunc))"
        ]
    },
    {
        "production":{"left": "<语句串>", "right": []},
        "action": [
            
        ]
    },
    {
        "production":{"left": "<语句串>", "right": ["<语句>", "<语句串>"]},
        "action": [
            
        ]
    },
    {
        "production":{"left": "<语句>", "right": ["<if语句>"]},
        "action": [
            
        ]
    },
    {
        "production":{"left": "<语句>", "right": ["<while语句>"]},
        "action": [
            
        ]
    },
    {
        "production":{"left": "<语句>", "right": ["<return语句>"]},
        "action": [
            
        ]
    },
    {
        "production":{"left": "<语句>", "right": ["<赋值语句>"]},
        "action": [
            
        ]
    },
    {
        "production":{"left": "<return语句>", "right": ["$return","<return内容>","$;"]},
        "action": [
            "emit('ret','','','')",
            "ldict.return += 1"
        ]
    },
    {
        "production":{"left": "<return内容>", "right": []},
        "action": [
            
        ]
    },{
        "production":{"left": "<return内容>", "right": ["<表达式>"]},
        "action": [
            "emit('=', @r0.val, '', '#eax')"
        ]
    },
    {
        "production":{"left": "<左括号>", "right": [ "$("]},
        "action": [
            "@l.quad=nextquad"
        ]
    },
    {
        "production":{"left": "<右括号>", "right": [ "$)"]},
        "action": [
            "@l.quad=nextquad"
        ]
    },
    {
        "production":{"left": "<真值判断>", "right": [ "<左括号>", "<布尔表达式>", "<右括号>"]},
        "action": [
            "@l.frontquad=@r0.quad",
            "@l.backquad=@r2.quad",
            "@l.t=@r1.t; @l.f=@r1.f;"
        ]
    },
    {
        "production":{"left": "<while语句>", "right": ["$while", "<真值判断>", "<语句块>"]},
        "action": [
            "batchlist(@r1.t, @r1.backquad)",
            "batchlist(@r1.f, nextquad)",
            "emit('j', '', '', @r1.frontquad)"
        ]
    },
    {
        "production":{"left": "<if语句>", "right": ["$if", "<真值判断>", "<语句块>", "<else内容>"]},
        "action": [
            "batchlist(@r1.t, @r1.backquad)",
            "if not @r3.end: batchlist(@r1.f, @r3.quad)",
            "if @r3.end: batchlist(@r1.f, nextquad)"
        ]
    },
    {
        "production":{"left": "<else内容>", "right": []},
        "action": [
            "@l.end=True"
        ]
    },
    {
        "production":{"left": "<else>", "right": ["$else"]},
        "action": [
            "@l.quad=nextquad"
        ]
    },
    {
        "production":{"left": "<else内容>", "right": ["<else>", "<语句块>"]},
        "action": [
            "@l.end=False",
            "@l.quad=@r0.quad"
        ]
    },
    {
        "production":{"left": "<赋值语句>", "right": ["$identifier", "$=", "<表达式>", "$;"]},
        "action": [
            "checkVarDefined(@r0.cont, @r0)",
            "emit('=', @r2.val, '', @r0.cont)"
        ]
    },
    {
        "production":{"left": "<表达式>", "right": ["<加法表达式>"]},
        "action": [
            "@l.val=@r0.val"
        ]
    },
    {
        "production":{"left": "<布尔表达式>", "right": ["<布尔or表达式>"]},
        "action": [
            "@l.f=@r0.f; @l.t=@r0.t;"
        ]
    },
    {
        "production":{"left": "<布尔or表达式>", "right": ["<布尔and表达式>", "<布尔or追加>"]},
        "action": [
            "if @r1.end: @l.t=@r0.t; @l.f=@r0.f;",
            "if not @r1.end: @l.f=@r1.f; @l.t=mergelist(@r0.t, @r1.t);",
            "if not @r1.end: batchlist(@r0.f, @r1.quad)"
        ]
    },
    {
        "production":{"left": "<布尔or追加>", "right": ["<or符号>", "<布尔and表达式>", "<布尔or追加>"]},
        "action": [
            "@l.end=False",
            "if @r2.end: @l.t=@r1.t; @l.f=@r1.f;",
            "if not @r2.end: @l.f=@r2.f; @l.t=mergelist(@r1.t, @r2.t);",
            "@l.quad=@r0.quad",
            "if not @r2.end: batchlist(@r1.f, @r2.quad)"
        ]
    },
    {
        "production":{"left": "<布尔or追加>", "right": []},
        "action": [
            "@l.end=True"
        ]
    },
    {
        "production":{"left": "<or符号>", "right": ["$or"]},
        "action": [
            "@l.quad=nextquad"
        ]
    },
    {
        "production":{"left": "<or符号>", "right": ["$||"]},
        "action": [
            "@l.quad=nextquad"
        ]
    },
    {
        "production":{"left": "<布尔and表达式>", "right": ["<布尔not表达式>"]},
        "action": [
            "@l.t=@r0.t; @l.f=@r0.f;"
        ]
    },
    {
        "production":{"left": "<布尔and表达式>", "right": ["<布尔and表达式>", "<and符号>","<M>", "<布尔not表达式>"]},
        "action": [
            "@l.t=@r3.t; @l.f=mergelist(@r0.f, @r3.f);",
            "batchlist(@r0.t, @r2.quad)"
        ]
    },
    {
        "production":{"left": "<and符号>", "right": ["$and"]},
        "action": [
            
        ]
    },
    {
        "production":{"left": "<and符号>", "right": ["$&&"]},
        "action": [
            
        ]
    },
    {
        "production":{"left": "<布尔not表达式>", "right": ["<布尔因子>"]},
        "action": [
            "@l.t=@r0.t",
            "@l.f=@r0.f"
        ]
    },
    {
        "production":{"left": "<布尔not表达式>", "right": ["<not符号>","<布尔因子>"]},
        "action": [
            "@l.t=@r1.f",
            "@l.f=@r1.t"
        ]
    },
    {
        "production":{"left": "<not符号>", "right": ["$not"]},
        "action": [

        ]
    },
    {
        "production":{"left": "<not符号>", "right": ["$~"]},
        "action": [

        ]
    },
    {
        "production":{"left": "<not符号>", "right": ["$!"]},
        "action": [

        ]
    },
    {
        "production":{"left": "<布尔因子>", "right": ["$(", "<布尔表达式>", "$)"]},
        "action": [
            "@l.t=@r1.t",
            "@l.f=@r1.f"
        ]
    },
    {
        "production":{"left": "<布尔因子>", "right": ["<比较表达式>"]},
        "action": [
            "@l.t=@r0.t",
            "@l.f=@r0.f"
        ]
    },
    {
        "production":{"left": "<比较表达式>", "right": ["<表达式>", "<比较>"]},
        "action": [
            "if not @r1.has: @l.t=makelist(nextquad);@l.f=makelist(nextquad+1);emit('jnz', @r0.val,'', 0);emit('j', '', '', 0);",
            "if @r1.has: backFill(@r1.quad, (None,@r0.val,None,None));@l.t=@r1.t;@l.f=@r1.f;"
        ]
    },
    {
        "production":{"left": "<比较>", "right": []},
        "action": [
            "@l.has=False"
        ]
    },
    {
        "production":{"left": "<比较>", "right": ["<比较符号>", "<表达式>"]},
        "action": [
            "@l.has=True",
            "@l.quad=nextquad",
            "@l.t=makelist(nextquad);@l.f=makelist(nextquad+1);",
            "emit('j'+@r0.cont,'', @r1.val, 0);emit('j', '', '', 0);"
        ]
    },
    {
        "production":{"left": "<比较符号>", "right": ["$<"]},
        "action": [
            "@l.cont=@r0.cont"
        ]
    },
    {
        "production":{"left": "<比较符号>", "right": ["$<="]},
        "action": [
            "@l.cont=@r0.cont"
        ]
    },
    {
        "production":{"left": "<比较符号>", "right": ["$>"]},
        "action": [
            "@l.cont=@r0.cont"
        ]
    },
    {
        "production":{"left": "<比较符号>", "right": ["$>="]},
        "action": [
            "@l.cont=@r0.cont"
        ]
    },{
        "production":{"left": "<比较符号>", "right": ["$=="]},
        "action": [
            "@l.cont=@r0.cont"
        ]
    },
    {
        "production":{"left": "<比较符号>", "right": ["$!="]},
        "action": [
            "@l.cont=@r0.cont"
        ]
    },
    {
        "production":{"left": "<M>", "right": []},
        "action": [
            "@l.quad=nextquad"
        ]
    },
    {
        "production":{"left": "<加法表达式>", "right": ["<项>"]},
        "action": [
            "@l.val=@r0.val"
        ]
    },
    {
        "production":{"left": "<加法表达式>", "right": ["<加法表达式>","<加法符号>","<项>"]},
        "action": [
            "@l.val=newVar()",
            "emit(@r1.cont, @r0.val, @r2.val, @l.val)"
        ]
    },
    {
        "production":{"left": "<加法符号>", "right": ["$+"]},
        "action": [
            "@l.cont=@r0.cont"
        ]
    },
    {
        "production":{"left": "<加法符号>", "right": ["$-"]},
        "action": [
            "@l.cont=@r0.cont"
        ]
    },
    {
        "production":{"left": "<项>", "right": ["<因子>"]},
        "action": [
            "@l.val=@r0.val"
        ]
    },
    {
        "production":{"left": "<项>", "right": ["<项>", "<项符号>", "<因子>"]},
        "action": [
            "@l.val=newVar()",
            "emit(@r1.cont, @r0.val, @r2.val, @l.val)"
        ]
    },
    {
        "production":{"left": "<项符号>", "right": ["$*"]},
        "action": [
            "@l.cont=@r0.cont"
        ]
    },
    {
        "production":{"left": "<项符号>", "right": ["$/"]},
        "action": [
            "@l.cont=@r0.cont"
        ]
    },
    {
        "production":{"left": "<因子>", "right": ["$digit_int"]},
        "action": [
            "@l.val=@r0.cont"
        ]
    },
    {
        "production":{"left": "<因子>", "right": ["$identifier", "<FTYPE>"]},
        "action": [
            "if @r1.mode=='v': checkVarDefined(@r0.cont, @r0)",
            "if @r1.mode=='v': @l.val=@r0.cont",
            "if @r1.mode=='f': checkFuncDefined(@r0.cont, @r0); checkFuncParNum(@r0.cont,@r1.cnt, @r0);",
            "if @r1.mode=='f': emit('call', @r0.cont, '', '')",
            "if @r1.mode=='f': @l.val='#eax'"
        ]
    },
    {
        "production":{"left": "<因子>", "right": ["$(","<表达式>","$)"]},
        "action": [
            "@l.val=@r1.val"
        ]
    },
    {
        "production":{"left": "<FTYPE>", "right": []},
        "action": [
            "@l.mode='v'"
        ]
    },
    {
        "production":{"left": "<FTYPE>", "right": ["<函数过程>"]},
        "action": [
            "@l.mode='f'",
            "for i in @r0.varlist:\n emit('par',i,'','')",
            "@l.cnt=len(@r0.varlist)"
        ]
    },
    {
        "production":{"left": "<函数过程>", "right": ["$(","<参数列表>","$)"]},
        "action": [
            "@l.varlist=@r1.varlist"
        ]
    },
    {
        "production":{"left": "<参数列表>", "right": []},
        "action": [
            "@l.cnt=0",
            "@l.varlist=[]"
        ]
    },
    {
        "production":{"left": "<参数列表>", "right": ["<追加参数列表>"]},
        "action": [
            "@l.cnt=@r0.cnt",
            "@l.varlist=@r0.varlist"
        ]
    },
    {
        "production":{"left": "<追加参数列表>", "right": ["<表达式>"]},
        "action": [
            "@l.cnt=1",
            "@l.varlist=makelist(@r0.val)"
        ]
    },
    {
        "production":{"left": "<追加参数列表>", "right": ["<追加参数列表>", "$,", "<表达式>"]},
        "action": [
            "@l.cnt=@r0.cnt+1",
            "@l.varlist=mergelist(@r0.varlist, makelist(@r2.val))"
        ]
    }
]