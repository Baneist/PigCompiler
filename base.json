[
    {
        "production": {"left": "<开始>", "right": ["<程序>"]},
        "action": [
            
        ]
    },
    {
        "production": {"left": "<函数名>", "right": ["$identifier"]},
        "action": [
            "checkFuncNotDefined(@r0.cont, @r0)",
            "ldict.func->append(@r0.cont)"
        ]
    },
    {
        "production": {"left": "<程序>", "right": ["<类型>","<函数名>","$(", "$)", "<语句块>"]},
        "action": [
            
        ]
    },
    {
        "production":{"left": "<类型>", "right": ["$int"]},
        "action": [
            "@l.type=@r0.cont"
        ]
    },
    {
        "production":{"left": "<类型>", "right": ["$void"]},
        "action": [
            "@l.type=@r0.cont"
        ]
    },
    {
        "production":{"left": "<语句块>", "right": ["${","<内部声明>","<语句串>","$}"]},
        "action": [
            
        ]
    },
    {
        "production":{"left": "<内部声明>", "right": []},
        "action": [
            
        ]
    },
    {
        "production":{"left": "<内部声明>", "right": ["<内部变量声明>", "$;", "<内部声明>"]},
        "action": [
            
        ]
    },
    {
        "production":{"left": "<内部变量声明>", "right": ["$int", "$identifier"]},
        "action": [
            "ldict.var->append((@r1.cont, 4))"
        ]
    },
    {
        "production":{"left": "<语句串>", "right": []},
        "action": [
            
        ]
    },
    {
        "production":{"left": "<语句串>", "right": ["<语句>", "<语句串>"]},
        "action": [
            
        ]
    },
    {
        "production":{"left": "<语句>", "right": ["<if语句>"]},
        "action": [
            
        ]
    },
    {
        "production":{"left": "<语句>", "right": ["<while语句>"]},
        "action": [
            
        ]
    },
    {
        "production":{"left": "<语句>", "right": ["<return语句>"]},
        "action": [
            
        ]
    },
    {
        "production":{"left": "<语句>", "right": ["<赋值语句>"]},
        "action": [
            
        ]
    },
    {
        "production":{"left": "<return语句>", "right": ["$return","<return内容>","$;"]},
        "action": [
            
        ]
    },
    {
        "production":{"left": "<return内容>", "right": []},
        "action": [
            
        ]
    },{
        "production":{"left": "<return内容>", "right": ["<表达式>"]},
        "action": [
            "emit('=', @r1.val, '', '#eax')"
        ]
    },
    {
        "production":{"left": "<while语句>", "right": ["$while", "$(", "<布尔表达式>", "$)", "<语句块>"]},
        "action": [
            "pass"
        ]
    },
    {
        "production":{"left": "<if语句>", "right": ["$if", "$(", "<布尔表达式>", "$)", "<语句块>", "<else内容>"]},
        "action": [
            "pass"
        ]
    },
    {
        "production":{"left": "<else内容>", "right": []},
        "action": [
            "pass"
        ]
    },
    {
        "production":{"left": "<else内容>", "right": ["$else", "<语句块>"]},
        "action": [
            "pass"
        ]
    },
    {
        "production":{"left": "<else内容>", "right": ["$else", "<语句块>"]},
        "action": [
            "pass"
        ]
    },
    {
        "production":{"left": "<赋值语句>", "right": ["$identifier", "$=", "<表达式>", "$;"]},
        "action": [
            "checkVarDefined(@r0.cont, @r0)",
            "emit('=', @r2.val, '', @r0.cont)"
        ]
    },
    {
        "production":{"left": "<表达式>", "right": ["<加法表达式>"]},
        "action": [
            "@l.val=@r0.val"
        ]
    },
    {
        "production":{"left": "<布尔表达式>", "right": ["<布尔or表达式>"]},
        "action": [
            
        ]
    },
    {
        "production":{"left": "<布尔or表达式>", "right": ["<布尔and表达式>"]},
        "action": [
            
        ]
    },
    {
        "production":{"left": "<布尔and表达式>", "right": ["<布尔not表达式>", "<布尔and追加>"]},
        "action": [
            "if @r1.end: @l.t=@r0.t; @l.f=@r0.f;",
            "if not @r1.end: @l.t=@r1.t; @l.f=mergelist(@r0.f, @r1.f);"
        ]
    },
    {
        "production":{"left": "<布尔and追加>", "right": ["<and符号>", "<布尔not表达式>", "<布尔and追加>"]},
        "action": [
            "@l.end=False",
            "if @r2.end: @l.t=@r1.t; @l.f=@r1.f;",
            "if not @r2.end: @l.t=@r2.t; @l.f=mergelist(@r1.f, @r2.f);"
        ]
    },
    {
        "production":{"left": "<布尔and追加>", "right": []},
        "action": [
            "@l.end=True"
        ]
    },
    {
        "production":{"left": "<and符号>", "right": ["$and"]},
        "action": [
            "@l.quad=nextquad"
        ]
    },
    {
        "production":{"left": "<布尔not表达式>", "right": ["<布尔因子>"]},
        "action": [
            "@l.t=@r0.t",
            "@l.f=@r0.f"
        ]
    },
    {
        "production":{"left": "<布尔not表达式>", "right": ["$not","<布尔因子>"]},
        "action": [
            "@l.t=@r1.f",
            "@l.f=@r1.t"
        ]
    },
    {
        "production":{"left": "<布尔因子>", "right": ["$(", "<布尔表达式>", "$)"]},
        "action": [
            "@l.t=@r1.t",
            "@l.f=@r1.f"
        ]
    },
    {
        "production":{"left": "<布尔因子>", "right": ["<比较表达式>"]},
        "action": [
            "@l.t=@r0.t",
            "@l.f=@r0.f"
        ]
    },
    {
        "production":{"left": "<比较表达式>", "right": ["<加法表达式>", "<比较符号>", "<加法表达式>"]},
        "action": [
            "@l.t=makelist(nextquad)",
            "@l.f=makelist(nextquad+1)",
            "emit('j'+@r1.cont, @r0.val, @r2.val, 0)",
            "emit('j', '', '', 0)"
        ]
    },
    {
        "production":{"left": "<比较表达式>", "right": ["<加法表达式>"]},
        "action": [
            "@l.t=makelist(nextquad)",
            "@l.f=makelist(nextquad+1)",
            "emit('jnz', @r0.val, '', 0)",
            "emit('j', '', '', 0)"
        ]
    },
    {
        "production":{"left": "<比较符号>", "right": ["$<"]},
        "action": [
            "@l.cont=@r0.cont"
        ]
    },
    {
        "production":{"left": "<比较符号>", "right": ["$<="]},
        "action": [
            "@l.cont=@r0.cont"
        ]
    },
    {
        "production":{"left": "<比较符号>", "right": ["$>"]},
        "action": [
            "@l.cont=@r0.cont"
        ]
    },
    {
        "production":{"left": "<比较符号>", "right": ["$>="]},
        "action": [
            "@l.cont=@r0.cont"
        ]
    },{
        "production":{"left": "<比较符号>", "right": ["$=="]},
        "action": [
            "@l.cont=@r0.cont"
        ]
    },
    {
        "production":{"left": "<比较符号>", "right": ["$!="]},
        "action": [
            "@l.cont=@r0.cont"
        ]
    },
    {
        "production":{"left": "<M>", "right": []},
        "action": [
            "@l.quad=nextquad"
        ]
    },
    {
        "production":{"left": "<加法表达式>", "right": ["<项>", "<M>", "<加法追加>"]},
        "action": [
            "@l.val=@r0.val",
            "if not @r2.end: @l.val=@r2.val",
            "if not @r2.end: backFill(@r2.quad, (None, @r0.val, None, None))"
        ]
    },
    {
        "production":{"left": "<加法追加>", "right": ["<加法符号>","<项>","<加法产生>","<加法追加>"]},
        "action": [
            "@l.end=False",
            "@l.quad=@r2.quad-1",
            "backFill(@r2.quad-1, (@r0.cont, None, @r1.val, None))",
            "if not @r3.end: backFill(@r3.quad, (None, @r2.val, None, None))",
            "@l.val=@r2.val",
            "if not @r3.end: @l.val=@r3.val"
        ]
    },
    {
        "production":{"left": "<加法产生>", "right": []},
        "action": [
            "@l.val=newVar()",
            "emit('', '', '', @l.val)",
            "@l.quad=nextquad"
        ]
    },
    {
        "production":{"left": "<加法追加>", "right": []},
        "action": [
            "@l.end=True"
        ]
    },
    {
        "production":{"left": "<加法符号>", "right": ["$+"]},
        "action": [
            "@l.cont=@r0.cont"
        ]
    },
    {
        "production":{"left": "<加法符号>", "right": ["$-"]},
        "action": [
            "@l.cont=@r0.cont"
        ]
    },
    {
        "production":{"left": "<项>", "right": ["<因子>", "<M>", "<项追加>"]},
        "action": [
            "@l.val=@r0.val",
            "if not @r2.end: @l.val=@r2.val",
            "if not @r2.end: backFill(@r2.quad, (None, @r0.val, None, None))"
        ]
    },
    {
        "production":{"left": "<项追加>", "right": ["<项符号>","<因子>","<项产生>","<项追加>"]},
        "action": [
            "@l.end=False",
            "@l.quad=@r2.quad-1",
            "backFill(@r2.quad-1, (@r0.cont, None, @r1.val, None))",
            "if not @r3.end: backFill(@r3.quad, (None, @r2.val, None, None))",
            "@l.val=@r2.val",
            "if not @r3.end: @l.val=@r3.val"
        ]
    },
    {
        "production":{"left": "<项产生>", "right": []},
        "action": [
            "@l.val=newVar()",
            "emit('', '', '', @l.val)",
            "@l.quad=nextquad"
        ]
    },
    {
        "production":{"left": "<项追加>", "right": []},
        "action": [
            "@l.end=True"
        ]
    },
    {
        "production":{"left": "<项符号>", "right": ["$*"]},
        "action": [
            "@l.cont=@r0.cont"
        ]
    },
    {
        "production":{"left": "<项符号>", "right": ["$/"]},
        "action": [
            "@l.cont=@r0.cont"
        ]
    },
    {
        "production":{"left": "<因子>", "right": ["$digit_int"]},
        "action": [
            "@l.val=@r0.cont"
        ]
    },
    {
        "production":{"left": "<因子>", "right": ["$identifier", "<FTYPE>"]},
        "action": [
            "if @r1.mode=='v': checkVarDefined(@r0.cont, @r0)",
            "if @r1.mode=='v': @l.val=@r0.cont",
            "if @r1.mode=='f': checkFuncDefined(@r0.cont, @r0)",
            "if @r1.mode=='f': emit('call', @r0.cont, '', '')",
            "if @r1.mode=='f': @l.val='#eax'"
        ]
    },
    {
        "production":{"left": "<因子>", "right": ["$(","<表达式>","$)"]},
        "action": [
            "@l.val=@r1.val"
        ]
    },
    {
        "production":{"left": "<FTYPE>", "right": []},
        "action": [
            "@l.mode='v'"
        ]
    },
    {
        "production":{"left": "<FTYPE>", "right": ["<函数调用>"]},
        "action": [
            "@l.mode='f'"
        ]
    },
    {
        "production":{"left": "<函数调用>", "right": ["$(","<实参列表>","$)"]},
        "action": [
            
        ]
    },
    {
        "production":{"left": "<实参列表>", "right": []},
        "action": [
            
        ]
    },
    {
        "production":{"left": "<实参>", "right": ["<表达式>"]},
        "action": [
            "emit('par', '@r0.val')"
        ]
    },
    {
        "production":{"left": "<实参列表>", "right": ["<实参>", "<追加实参列表>"]},
        "action": [
            
        ]
    },
    {
        "production":{"left": "<追加实参列表>", "right": []},
        "action": [
            
        ]
    },
    {
        "production":{"left": "<追加实参列表>", "right": ["$,","<实参>", "<追加实参列表>"]},
        "action": [
            
        ]
    }

]